{
  "name": "Achilterm",
  "tagline": "Achilterm is a web based terminal.",
  "body": "# Achilterm\r\n\r\nAchilterm is a web based terminal forked from Ajaxterm which was inspired by Anyterm.\r\n\r\nAchilterm is Ajaxterm ported from QWeb to WebOb and without Sarissa dependency.\r\n\r\nAchilterm is written in python (and some AJAX javascript for client side) and depends only on python2.5 or better.\r\n\r\nAchilterm is **very simple to install** on Linux, MacOS X, FreeBSD, Solaris, cygwin and any Unix that runs python2.5.\r\n\r\nAchilterm is developed by Florent Gallaire <fgallaire@gmail.com>.\r\n\r\n## Download and Install\r\n\r\nTo install Achilterm issue the following commands:\r\n```\r\ngit clone https://github.com/fgallaire/achilterm.git\r\ncd achilterm\r\n./achilterm.py\r\n```\r\nThen point your browser to this URL : `http://localhost:8022/`\r\n\r\n## Documentation and Caveats\r\n\r\n * Achilterm only support WebOb < 1.0\r\n\r\n * Achilterm only support latin1, if you use Ubuntu or any LANG==en_US.UTF-8 distribution don't forget to \"unset LANG\".\r\n\r\n * If run as root achilterm will run /bin/login, otherwise it will run ssh\r\n   localhost. To use an other command use the -c option.\r\n\r\n * By default Achilterm only listen at `127.0.0.1:8022`. For remote access, it is\r\n   strongly recommended to use **https SSL/TLS**, and that is simple to\r\n   configure if you use the apache web server using mod_proxy.\r\n\r\n   Using ssl will also speed up achilterm (probably because of keepalive).\r\n\r\n * Using GET HTTP request seems to speed up achilterm, just click on GET in the\r\n   interface, but be warned that your keystrokes might be loggued (by apache or\r\n   any proxy). I usually enable it after the login.\r\n\r\n\r\n## Configuration example\r\n\r\n```\r\n    Listen 443\r\n    NameVirtualHost *:443\r\n\r\n    <VirtualHost *:443>\r\n       ServerName localhost\r\n       SSLEngine On\r\n       SSLCertificateKeyFile ssl/apache.pem\r\n       SSLCertificateFile ssl/apache.pem\r\n\r\n       ProxyRequests Off\r\n       <Proxy *>\r\n               Order deny,allow\r\n               Allow from all\r\n       </Proxy>\r\n       ProxyPass /achilterm/ http://localhost:8022/\r\n       ProxyPassReverse /achilterm/ http://localhost:8022/\r\n    </VirtualHost>\r\n```\r\n\r\n## Commandline usage:\r\n\r\n```\r\nusage: achilterm.py [options]\r\n\r\noptions:\r\n  -h, --help            show this help message and exit\r\n  -pPORT, --port=PORT   Set the TCP port (default: 8022)\r\n  -cCMD, --command=CMD  set the command (default: /bin/login or ssh localhost)\r\n  -l, --log             log requests to stderr (default: quiet mode)\r\n  -d, --daemon          run as daemon in the background\r\n  -PPIDFILE, --pidfile=PIDFILE\r\n                        set the pidfile (default: /var/run/achilterm.pid)\r\n  -iINDEX_FILE, --index=INDEX_FILE\r\n                        default index file (default: achilterm.html)\r\n  -uUID, --uid=UID      Set the daemon's user id\r\n```\r\n\r\n## Compared to anyterm:\r\n\r\n * There are no partial updates, achilterm updates either all the screen or\r\n   nothing. That make the code simpler and I also think it's faster. HTTP\r\n   replies are always gzencoded. When used in 80x25 mode, almost all of\r\n   them are below the 1500 bytes (size of an ethernet frame) and we just\r\n   replace the screen with the reply (no javascript string handling).\r\n\r\n * Achilterm polls the server for updates with an exponentially growing\r\n   timeout when the screen hasn't changed. The timeout is also resetted as\r\n   soon as a key is pressed. Anyterm blocks on a pending request and use a\r\n   parallel connection for keypresses. The anyterm approch is better\r\n   when there aren't any keypress.\r\n\r\n## License\r\n\r\nAchilterm files are released under the GNU AGPLv3 or above license.\r\n\r\nAchilterm codebase from Ajaxterm by Antony Lesuisse (email: al AT udev.org), License Public Domain.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}